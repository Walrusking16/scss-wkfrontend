$white: (
	"main": #ffffff,
	"skip-light": true
);

$gray: (
	"main": #bdc3c7,
	ignore-light: ("lighten-5": true)
);

$lightgray: (
	"main": #ecf0f1,
	ignore-light: ("lighten-5": true, "lighten-4": true, "lighten-3": true, "lighten-2": true)
);

$darkgray: #7f8c8d;

$success: #2ecc71;

$green: #27ae60;

$turq: #1abc9c;

$teal: #16a085;

$danger: #e74c3c;

$red: #c0392b;

$warn: #f1c40f;

$orange: #e67e22;

$dark-orange: #d35400;

$blue: #3498db;

$dark-blue: #2980b9;

$purple: #9b59b6;

$dark-purple: #8e44ad;

$black: #34495e;

$dark-black: #2c3e50;

$colors: (
	"white": $white,
	"gray": $gray,
	"lightgray": $lightgray,
	"darkgray": $darkgray,
	"success": $success,
	"green": $green,
	"turq": $turq,
	"teal": $teal,
	"danger": $danger,
	"red": $red,
	"warn": $warn,
	"orange": $orange,
	"darkorange": $dark-orange,
	"blue": $blue,
	"darkblue": $dark-blue,
	"purple": $purple,
	"darkpurple": $dark-purple,
	"black": $black,
	"darkblack": $dark-black
);

@function get($color, $sec: null){
	@if (map-has-key($colors, $color)) {
		@if(map-get($colors, $color) == 'map'){
			$color: map-get(map-get($colors, $color), "main");
		}
		@else {
			$color: map-get($colors, $color);
		}
	}
	@else {
		@error "Unknown color: #{$color}";
	}

	@if($sec != null) {
		@if(map-has_key($lighten, $sec)) {
			$color: lighten($color, map-get($lighten, $sec));
		}
		@else if(map-has_key($darken, $sec)) {
			$color: darken($color, map-get($darken, $sec));
		}
		@else {
			@error "Inviald light/darken value: #{$sec}";
		}
	}

	@return $color;
}

$lighten: (
	"lighten-1": 5%,
	"lighten-2": 10%,
	"lighten-3": 15%,
	"lighten-4": 20%,
	"lighten-5": 25%
);

$darken: (
	"darken-1": 5%,
	"darken-2": 10%,
	"darken-3": 15%,
	"darken-4": 20%,
	"darken-5": 25%
);

@each $name, $color in $colors {
	$use-light: true;
	$use-dark: true;
	$data: null;
	// Check if color is a map and set color to the main color
	@if(type-of($color) == 'map'){
		$data: $color;
		$color: map-get($data, "main");
		@if (map-has-key($data, "skip-light")){
			$use-light: not map-get($data, "skip-light");
		}
		@if (map-has-key($data, "skip-dark")){
			$use-light: not map-get($data, "skip-dark");
		}
	}

	// Create text color
	.text-#{$name} {
		color: $color !important;
	}

	// Create background color
	.#{$name} {
		background-color: $color !important;
	}

	// Create a btn specific color with hover and transition
	.btn.#{$name} {
		background-color: $color !important;
		transition: background-color 200ms, box-shadow 300ms !important;

		&:hover {
			background-color: darken($color, 5%) !important;
		}

		&:focus {
			box-shadow: 0 0 0 3px rgba($color, 0.6) !important;
		}
	}

	// Create lightened versions of the color
	@if($use-light) {
		@each $light, $val in $lighten {
			@if ($data == null or not (map-has-key($data, "ignore-light")) or (map-has-key($data, "ignore-light") and not map-has-key(map-get($data, "ignore-light"), $light))) {
				.text-#{$name}.text-#{$light} {
					color: lighten($color, $val) !important;
				}
				.#{$name}.#{$light} {
					background-color: lighten($color, $val) !important;
				}
			}
		}
	}

	// Create darkened versions of the color
	@if($use-dark){
		@each $dark, $val in $darken {
			@if ($data == null or not (map-has-key($data, "ignore-dark")) or (map-has-key($data, "ignore-dark") and not map-has-key(map-get($data, "ignore-dark"), $dark))) {
				.text-#{$name}.text-#{$dark} {
					color: darken($color, $val) !important;
				}
				.#{$name}.#{$dark} {
					background-color: darken($color, $val) !important;
				}
			}
		}
	}
}